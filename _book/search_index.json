[
["index.html", "数据科学中的 R 语言 前言 关于课程 课件中用到的宏包 RYouWithMe 致谢", " 数据科学中的 R 语言 王敏杰 2020-09-05 前言 你好，这里是四川师范大学研究生公选课《数据科学中的R语言》的课程内容。考虑到大家来自不同的学院，有着不同的学科背景，因此讲授的内容不会太深奥（要有信心喔）。 比如在课程中以下内容就不会出现 \\[ f(x)=\\frac{1}{\\sqrt{2 \\pi}} e^{-\\frac{1}{2} x^{2}} \\] 而出现更多的是 library(tidyverse) summary_monthly_temp &lt;- weather %&gt;% group_by(month) %&gt;% summarize(mean = mean(temp), std_dev = sd(temp)) 在跟进本课程的同时， 我强烈推荐大家阅读Hadley Wickham的 r4ds这本书 (Grolemund and Wickham 2017)。作者可是2019年8月刚刚获得考普斯总统奖（被誉为统计学的诺贝尔奖）的大神喔，点击这里可以看他照片。 关于课程 1、课程安排是这样的，每个章节研究的内容都是彼此独立的，大家可以单独阅读每章及运行代码。 基础篇 第 ?? 章介绍数据科学基础 第 ?? 章介绍R语言基本概念 第 ?? 章介绍R语言中的子集选取 tidyverse篇 第 ?? 章介绍可重复性研究 第 ?? 章介绍数据读入 第 ?? 章介绍数据规整与数据处理 第 ?? 章介绍数据可视化 第 ?? 章介绍字符串处理 第 ?? 章介绍因子类型数据 第 ?? 章介绍函数式编程 第 ?? 章介绍简单数据框 第 ?? 章ggplot2几何对象 第 ?? 章ggplot2的主题 第 ?? 章ggplot2的标度 第 ?? 章ggplot2的图例 第 ?? 章让你的数据骚动起来 第 ?? 章介绍tidyverse进阶 第 ?? 章介绍tidyverse中行方向的操作 第 ?? 章介绍数据框列方向和行方向 第 ?? 章介绍tidyverse中常用技巧 第 ?? 章介绍tidyverse中的dot 第 ?? 章介绍非标准性评估 建模篇 第 ?? 章介绍模拟与抽样 第 ?? 章介绍方差分析 第 ?? 章介绍线性模型 第 ?? 章介绍多层线性模型 第 ?? 章介绍广义线性模型 第 ?? 章介绍有序logistic回归模型 第 ?? 章介绍机器学习 应用篇 第 ?? 章介绍探索性数据分析-诺奖获得者 第 ?? 章介绍探索性数据分析-奥林匹克 第 ?? 章介绍探索性数据分析-新冠疫情 第 ?? 章介绍探索性数据分析-anscombe数据集 第 ?? 章介绍探索性数据分析-身高体重 第 ?? 章介绍探索性数据分析-驯鹿迁移 第 ?? 章介绍探索性数据分析-企鹅的故事 第 ?? 章介绍网页爬虫 第 ?? 章介绍社会网络分析 第 ?? 章介绍文本挖掘 第 ?? 章介绍时间序列分析 第 ?? 章介绍地理数据处理 第 ?? 章介绍我收集的一些有用和有趣的宏包 2、课件源代码和数据 我将持续改进课件，所以欢迎大家提出建议 https://github.com/perlatex/R_for_Data_Science 3、课程视频 部分课程视频放在bilibili网站 4、关于课程目标 课程目标: 熟悉数据科学流程，掌握统计编程技能，能运用探索性分析方法，解决基本的实际应用问题，做到学以致用，不是 learning R，而是 learning with R 授课方式: 边写代码边讲 通过案例式、问题式的方法，增强参与感和目标感 课堂要求 自带电脑，配好运行环境 光看李小龙的电影，是学不会功夫的 知识脚手架 知识脚手架，我个人比较喜欢这个比喻。在教育中，各种知识或技巧就好比建房子用的脚手架，它帮助我们加深理解，逐渐获得独立自主学习的能力。 5、关于如何提问 有的同学，这样一上来就问：老师，我的代码怎么运行不出来呢？或者图省事，干脆手机拍个照片一发。 我想说，要想获得快速的帮助，在问问题之前，请先告诉对方三个信息： 想解决的问题是什么？ 代码是什么？ 报错信息是什么？ 课件中用到的宏包 my_packages &lt;- c( &quot;brms&quot;, &quot;broom&quot;, &quot;broom.mixed&quot;, &quot;corrr&quot;, &quot;countrycode&quot;, &quot;cowplot&quot;, &quot;cranlogs&quot;, &quot;datapasta&quot;, &quot;devtools&quot;, &quot;dplyr&quot;, &quot;forcats&quot;, &quot;gapminder&quot;, &quot;gganimate&quot;, &quot;ggstatsplot&quot;, &quot;ggeffects&quot;, &quot;ggbeeswarm&quot;, &quot;ggforce&quot;, &quot;gghighlight&quot;, &quot;ggplot2&quot;, &quot;ggpubr&quot;, &quot;ggraph&quot;, &quot;ggrepel&quot;, &quot;ggridges&quot;, &quot;ggtext&quot;, &quot;gt&quot;, &quot;gtsummary&quot;, &quot;haven&quot;, &quot;here&quot;, &quot;janitor&quot;, &quot;knitr&quot;, &quot;latex2exp&quot;, &quot;lme4&quot;, &quot;lubridate&quot;, &quot;maps&quot;, &quot;margins&quot;, &quot;MASS&quot;, &quot;modelr&quot;, &quot;naniar&quot;, &quot;nycflights13&quot;, &quot;ordinal&quot;, &quot;pacman&quot;, &quot;paletteer&quot;, &quot;patchwork&quot;, &quot;performance&quot;, &quot;purrr&quot;, &quot;readr&quot;, &quot;readxl&quot;, &quot;remotes&quot;, &quot;reprex&quot;, &quot;rlang&quot;, &quot;rmarkdown&quot;, &quot;rstan&quot;, &quot;rvest&quot;, &quot;scales&quot;, &quot;sf&quot;, &quot;shadowtext&quot;, &quot;showtext&quot;, &quot;slider&quot;, &quot;stars&quot;, &quot;statsExpressions&quot;, &quot;stringr&quot;, &quot;styler&quot;, &quot;tibble&quot;, &quot;tibbletime&quot;, &quot;tidybayes&quot;, &quot;tidygraph&quot;, &quot;tidymodels&quot;, &quot;tidyr&quot;, &quot;tidytext&quot;, &quot;tidyverse&quot;, &quot;tinytex&quot;, &quot;viridis&quot;, &quot;visdat&quot;, &quot;geoshpere&quot;, &quot;ggstatsplot&quot;, &quot;datasauRus&quot;, &quot;ggimage&quot;, &quot;ggthemes&quot;, &quot;pacman&quot;, &quot;equatiomatic&quot; ) install.packages(my_packages, repos = &quot;http://cran.rstudio.com&quot;, dependencies = T) 可能用到的开发版本的宏包 #remotes::install_github(&quot;datalorax/equatiomatic&quot;) devtools::install_github(&quot;easystats/report&quot;) devtools::install_github(&quot;kassambara/navdata&quot;) devtools::install_github(&#39;cttobin/ggthemr&#39;) remotes::install_github(&quot;daranzolin/inferregex&quot;) devtools::install_github(&quot;EmilHvitfeldt/gganonymize&quot;) remotes::install_github(&quot;ThinkR-open/remedy&quot;) remotes::install_git(&quot;https://git.rud.is/hrbrmstr/hrbraddins.git&quot;) devtools::install_github(&quot;hadley/emo&quot;) remotes::install_github(&quot;romainfrancois/lay&quot;) remotes::install_github(&quot;kjhealy/covdata&quot;) RYouWithMe 致谢 非常感谢川师研究生院的信任， 有了您的支持，才会有更多的川师学子了解R的美！ 王敏杰 于 川师图书馆某角落 参考文献 "],
["author.html", "作者简介", " 作者简介 王敏杰，四川师范大学研究生公选课《数据科学中的R语言》和《社会科学中的统计学》授课老师，西南交通大学量子物理学博士，爱好数据科学，喜欢用R和Stan统计编程， 联系方式 38552109@qq.com "],
["ggplot2-academic.html", "第 1 章 科研数据可视化 1.1 统计分布图 1.2 说明", " 第 1 章 科研数据可视化 1.1 统计分布图 很多情形下，我们都需要画出统计分布图。比如，天气温度数据(美国内布拉斯加州东部，林肯市， 2016年)，我们想看每个月份里气温的分布情况 lincoln_df &lt;- ggridges::lincoln_weather %&gt;% mutate( month_short = fct_recode( Month, Jan = &quot;January&quot;, Feb = &quot;February&quot;, Mar = &quot;March&quot;, Apr = &quot;April&quot;, May = &quot;May&quot;, Jun = &quot;June&quot;, Jul = &quot;July&quot;, Aug = &quot;August&quot;, Sep = &quot;September&quot;, Oct = &quot;October&quot;, Nov = &quot;November&quot;, Dec = &quot;December&quot; ) ) %&gt;% mutate(month_short = fct_rev(month_short)) %&gt;% select(Month, month_short, `Mean Temperature [F]`) lincoln_df %&gt;% head(10) 统计分布图的方法很多，我们下面比较各种方法的优劣。 1.1.1 points-errorbars 画分布图的最简单的方法，就是计算每个月的气温均值或者中位数，并在均值或者中位数位置标出误差棒(error bars)，比如图 1.1 。 lincoln_errbar &lt;- lincoln_df %&gt;% ggplot(aes(x = month_short, y = `Mean Temperature [F]`)) + stat_summary( fun.y = mean, fun.ymax = function(x) { mean(x) + 2 * sd(x) }, fun.ymin = function(x) { mean(x) - 2 * sd(x) }, geom = &quot;pointrange&quot;, fatten = 5 ) + xlab(&quot;month&quot;) + ylab(&quot;mean temperature (°F)&quot;) + theme_classic(base_size = 14) + theme( axis.text = element_text(color = &quot;black&quot;, size = 12), plot.margin = margin(3, 7, 3, 1.5) ) lincoln_errbar 图 1.1: 林肯市2016年气温变化图 但这个图有很多问题，或者说是错误的 图中只用了一个点和两个误差棒，丢失了很多分布信息。 读者不能很直观的读出这个点的含义（是均值还是中位数？） 误差棒代表的含义不明确（标准差？标准误？还是其他？） 通过看代码，知道这里用的是，均值加减2倍的标准差，其目的是想表达这个范围涵盖了95%的的数据。 事实上，误差棒一般用于标准误（或者加减2倍的标准误来代表估计均值的95%置信区间），所以这里使用标准差就造成了混淆。 ( 标准误：对样本均值估计的不确定性; 标准差：对偏离均值的分散程度 ) 现实的数据往往是偏态的，但这个图的误差棒几乎是对称，会让人觉得产生怀疑。 1.1.2 箱线图 为了解决以上问题，可以使用箱线图（boxplot），箱线图将数据分成若干段，如图 1.2. 图 1.2: 箱线图示意图 盒子中间的横线是中位数(50th percentile)，底部的横线代表第一分位数(25th percentile)，顶部的横线代表第三分位数(75th percentile) 盒子的范围覆盖了50%的数据，每个小盒子是25%的数据，盒子高度越短， 说明数据越集中，盒子高度越长，数据越分散。 上面的这条竖线的长度 = 从盒子上边缘开始，延伸到1.5倍盒子高度的范围中最远的点 下面的这条竖线的长度 = 从盒子下边缘开始，延伸到1.5倍盒子高度的范围中最远的点 在线条之外的点就是 outlies 那么气温分布用箱线图画出来 (图 1.3). 我们可以看到12月份数据 偏态（绝大部分时候中等的冷，少部分是极度寒冷），其他月份，比如7月份，数据分布的比较正态 lincoln_box &lt;- lincoln_df %&gt;% ggplot(aes(x = month_short, y = `Mean Temperature [F]`)) + geom_boxplot(fill = &quot;grey90&quot;) + xlab(&quot;month&quot;) + ylab(&quot;mean temperature (°F)&quot;) + theme_classic(base_size = 14) + theme( axis.text = element_text(color = &quot;black&quot;, size = 12), plot.margin = margin(3, 7, 3, 1.5) ) lincoln_box 图 1.3: 林肯市2016年气温分布箱线图 1.1.3 小提琴图 箱线图是1970年代统计学家发明的一种可视化方法，这种图可以很方便地用手工画出，所以当时很流行，现在计算机性能大大提升了，所以大家喜欢用视觉上更直观的小提琴图取代箱线图 图 1.4: 小提琴图示意图 小提琴图相当于密度分布图旋转90度，然后再做个对称的镜像 最宽或者最厚的地方，对应着数据密度最大的地方 箱线图能用的地方小提琴图都能用，而且小提琴图可以很好的展示bimodal data的情况（箱线图做不到） 图 1.5: 图片来源：nature methods, VOL.11, NO.2, FEBRUARY 2014 在图 1.6， 我们使用小提琴图画图气温分布，可以看到，11月份的时候，有两个高密度区间（两个峰，50 degrees 和 35 degrees Fahrenheit），注意，这个信息在前面两个图中是没有的。 lincoln_violin &lt;- lincoln_df %&gt;% ggplot(aes(x = month_short, y = `Mean Temperature [F]`)) + geom_violin(fill = &quot;grey90&quot;) + xlab(&quot;month&quot;) + ylab(&quot;mean temperature (°F)&quot;) + theme_classic(base_size = 14) + theme( axis.text = element_text(color = &quot;black&quot;, size = 12), plot.margin = margin(3, 7, 3, 1.5) ) lincoln_violin 图 1.6: 林肯市2016年气温分布小提琴图 事实上，小提琴图也是不完美的，用的是密度分布图，会造成没有数据点的地方，也会有分布。怎么解决呢？ 1.1.4 sina 图 解决办法就是，把原始数据点打上去， lincoln_points &lt;- lincoln_df %&gt;% ggplot(aes(x = month_short, y = `Mean Temperature [F]`)) + geom_point(size = 0.75) + xlab(&quot;month&quot;) + ylab(&quot;mean temperature (°F)&quot;) + theme_classic(base_size = 14) + theme( axis.text = element_text(color = &quot;black&quot;, size = 12), plot.margin = margin(3, 7, 3, 1.5) ) lincoln_points 图 1.7: 林肯市2016年气温分布散点图 但问题又来了，这样会有大量重叠的点。有时候会采用透明度的办法，即给每个点设置透明度，某个位置颜色越深，说明这个位置重叠的越多。当然，最好的办法是，给每个点增加一个随机的很小的“偏移”，即抖散图。 lincoln_jitter &lt;- lincoln_df %&gt;% ggplot(aes(x = month_short, y = `Mean Temperature [F]`)) + geom_point(position = position_jitter(width = .15, height = 0, seed = 320), size = 0.75) + xlab(&quot;month&quot;) + ylab(&quot;mean temperature (°F)&quot;) + theme_classic(base_size = 14) + theme( axis.text = element_text( color = &quot;black&quot;, size = 12 ), plot.margin = margin(3, 7, 3, 1.5) ) lincoln_jitter 图 1.8: 林肯市2016年气温分布抖散图 于是，（小提琴图 + 抖散图）= sina 图，这样既可以看到原始的点，又可以看到统计分布，见图 1.9. lincoln_sina &lt;- lincoln_df %&gt;% ggplot(aes(x = month_short, y = `Mean Temperature [F]`)) + geom_violin(color = &quot;transparent&quot;, fill = &quot;gray90&quot;) + # dviz.supp::stat_sina(size = 0.85) + geom_jitter(width = 0.25, size = 0.85) + xlab(&quot;month&quot;) + ylab(&quot;mean temperature (°F)&quot;) + theme_classic(base_size = 14) + theme( axis.text = element_text( color = &quot;black&quot;, size = 12 ), plot.margin = margin(3, 7, 3, 1.5) ) lincoln_sina 图 1.9: 林肯市2016年气温分布 sina 图 1.1.5 山峦图 前面的图，分组变量（月份）是顺着x轴，这里介绍的山峦图（重山叠叠的感觉）分组变量是顺着y轴，这种图，在画不同时间的分布图的时候，效果非常不错。 比如图 1.10， 展示气温分布的山峦图。同样，图中很直观地展示了11月份的气温分布有两个峰值。 bandwidth &lt;- 3.4 lincoln_df %&gt;% ggplot(aes(x = `Mean Temperature [F]`, y = `Month`)) + geom_density_ridges( scale = 3, rel_min_height = 0.01, bandwidth = bandwidth, fill = colorspace::lighten(&quot;#56B4E9&quot;, .3), color = &quot;white&quot; ) + scale_x_continuous( name = &quot;mean temperature (°F)&quot;, expand = c(0, 0), breaks = c(0, 25, 50, 75) ) + scale_y_discrete(name = NULL, expand = c(0, .2, 0, 2.6)) + theme_minimal(base_size = 14) + theme( axis.text = element_text(color = &quot;black&quot;, size = 12), axis.text.y = element_text(vjust = 0), plot.margin = margin(3, 7, 3, 1.5) ) 图 1.10: 林肯市2016年气温分布山峦图 但这种图，也有一个问题，y轴是分组变量，x轴是数据的密度分布，缺少了密度分布的标度（即，缺少了密度图的高度，事实上，小提琴图也有这个毛病），所以这种图不适合比较精确的密度分布展示，但在探索性分析中，比较不同分组的密度分布，可以很方便获取直观的认知感受。 1.1.6 有颜色山峦图 我们看到 温度值越高，x轴坐标越靠右； 温度值越高，颜色更亮； 因此，可以将气温变量映射到位置属性和颜色属性，见图 1.11 bandwidth &lt;- 3.4 lincoln_base &lt;- lincoln_weather %&gt;% ggplot(aes(x = `Mean Temperature [F]`, y = `Month`, fill = ..x..)) + geom_density_ridges_gradient( scale = 3, rel_min_height = 0.01, bandwidth = bandwidth, color = &quot;black&quot;, size = 0.25 ) + scale_x_continuous( name = &quot;mean temperature (°F)&quot;, expand = c(0, 0), breaks = c(0, 25, 50, 75), labels = NULL ) + scale_y_discrete(name = NULL, expand = c(0, .2, 0, 2.6)) + colorspace::scale_fill_continuous_sequential( palette = &quot;Heat&quot;, l1 = 20, l2 = 100, c2 = 0, rev = FALSE ) + guides(fill = &quot;none&quot;) + theme_minimal(base_size = 14) + theme( axis.text = element_text(color = &quot;black&quot;, size = 12), axis.text.y = element_text(vjust = 0), plot.margin = margin(3, 7, 3, 1.5) ) # x axis labels temps &lt;- data.frame(temp = c(0, 25, 50, 75)) # calculate corrected color ranges # stat_joy uses the +/- 3*bandwidth calculation internally tmin &lt;- min(lincoln_weather$`Mean Temperature [F]`) - 3 * bandwidth tmax &lt;- max(lincoln_weather$`Mean Temperature [F]`) + 3 * bandwidth xax &lt;- axis_canvas(lincoln_base, axis = &quot;x&quot;, ylim = c(0, 2)) + geom_ridgeline_gradient( data = data.frame(temp = seq(tmin, tmax, length.out = 100)), aes(x = temp, y = 1.1, height = .9, fill = temp), color = &quot;transparent&quot; ) + geom_text( data = temps, aes(x = temp, label = temp), color = &quot;black&quot;, # family = &quot;Myriad Pro&quot;, y = 0.9, hjust = 0.5, vjust = 1, size = 14 / .pt ) + colorspace::scale_fill_continuous_sequential( palette = &quot;Heat&quot;, l1 = 20, l2 = 100, c2 = 0, rev = FALSE ) lincoln_final &lt;- cowplot::insert_xaxis_grob(lincoln_base, xax, position = &quot;bottom&quot;, height = unit(0.1, &quot;null&quot;)) ggdraw(lincoln_final) 图 1.11: 林肯市2016年气温分布山峦图（颜色越亮，温度越高） 1.2 说明 本章的数据和代码来源于Claus O. Wilke的《Fundamentals of Data Visualization》的第9章和第20章. "],
["exams.html", "A 期末考试 A.1 方式 A.2 要求 A.3 数据集", " A 期末考试 研究生生涯的主要工作就是学习，而学以致用是最好的学习路径。考虑同学们不同的学科背景，同时也参考国内其它高校的做法，本学期《数据科学中的 R 语言》期末考试安排如下： A.1 方式 结合所在学科，找一篇与自己研究方向相关的文献，用课堂上学到的R统计编程技能，重复文献的数据分析过程。 A.2 要求 在2020年06月15日前，将以下资料打包并提交38552109@qq.com邮箱 所重复的文献（并在文献中高亮你重复的部分） 数据 Rmarkdown源代码 分析结果(生成的pdf或者html文件) 注明学号和姓名 A.3 数据集 仅供参考 https://datahub.io/collections/economic-data https://cnki.net/ https://osf.io/ https://www.kaggle.com/datasets https://toolbox.google.com/datasetsearch https://chfs.swufe.edu.cn/（中国家庭金融调查） http://www.isss.pku.edu.cn/cfps/index.htm（中国家庭追踪调查） http://www.ciejournal.org/ (中国工业经济) http://www.stats.gov.cn/tjsj/ndsj/ (中国统计年鉴) https://www.oecd.org/pisa/ 国际学生评估项目 (PISA) "],
["references.html", "参考文献", " 参考文献 "]
]
